#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void merge(char* arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    char* L[n1];
    char* R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = l; // Initial index of merged subarray
    while (i < n1 && j < n2) {
        if (strcmp(L[i], R[j]) <= 0) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(char* arr[], int l, int r) {
    if (l < r) {
        // Same as (l+r)/2, but avoids overflow for large l and r
        int m = l + (r - l) / 2;

        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}

int main() {
    int n;

    printf("Enter the number of mobile numbers: ");
    scanf("%d", &n);

    char* mobileNumbers[n];

    for (int i = 0; i < n; i++) {
        mobileNumbers[i] = (char*)malloc(11 * sizeof(char)); // Assuming mobile numbers are 10 digits long
        printf("Enter mobile number %d: ", i + 1);
        scanf("%s", mobileNumbers[i]);
    }

    mergeSort(mobileNumbers, 0, n - 1);

    printf("Sorted mobile numbers:\n");
    for (int i = 0; i < n; i++) {
        printf("%s\n", mobileNumbers[i]);
        free(mobileNumbers[i]);
    }

    return 0;
}
